<style>
  .cart-page-container {
    padding: 0 20px;
    font-family: var(--learn-font);
  }
  .cart{
    display: flex;
    gap: 1rem;
    width: 100%; /* Ensure the cart section takes full width */
  }
  .cart-page-container h1 {
    font-family: var(--logo-font);
    font-size: 2rem;
    text-align: center;
    margin-bottom: 40px;
  }
  .cart-header {
    display: flex;
    justify-content: space-between;
    padding-bottom: 10px;
    padding: 1rem 2rem;
    margin-bottom: 20px;
    font-size: 1.2rem;
  }
  .cart-item {
    display: flex;
    gap: 20px;
    justify-content: space-between;
    align-items: center; /* Vertically align items */
    padding: 20px 0;
    border-bottom: 1px solid #e5e5e5;
    transition: opacity 0.3s ease; /* For visual feedback */
  }
  .cart-item-image img {
    width: 150px;
    height: 150px;
    border-radius: 8px;
    border: 1px solid #e5e5e5;
  }
  .cart-item-info {
    display: flex;
    flex-direction: column;
    gap: 8px;
  }
  .cart-item-info a {
    text-decoration: none;
    color: #000;
    font-size: 1.1rem;
  }
  .cart-item-price .original-price {
    text-decoration: line-through;
    color: #888;
    margin-left: 8px;
  }
  .variant-title {
    font-size: 0.9rem;
    color: #555;
  }
  .quantity-selector {
    display: flex;
    align-items: center;
    border: 1px solid #ccc;
    width: fit-content;
  }
  .quantity-selector button,
  .quantity-selector .quantity {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 35px;
    height: 35px;
    text-decoration: none;
    color: #000;
    background: none;
    border: none;
    cursor: pointer;
    font-size: 1rem;
  }
  .cart-footer {
    margin-top: 30px;
    display: flex;
    flex-direction: column;
    align-items: flex-end;
  }
  .cart-total {
    font-size: 1.2rem;
    margin-bottom: 20px;
  }
  .cart-total .price {
    font-size: 1.1rem;
    margin-left: 15px;
  }
  .cart-actions {
    display: flex;
    gap: 15px;
  }
  .cart-actions .button {
    height: 45px;
    padding: 0 30px;
    font-family: var(--herodesc-font);
    font-size: 1rem;
    text-decoration: none;
    border-radius: .25rem;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
  }
  .button--secondary {
    background-color: #fff;
    color: #000;
    border: 1px solid #000;
  }
  .button--primary {
    background-color: #000;
    color: #fff;
    border: 1px solid #000;
  }
  .cart-empty {
    text-align: center;
    padding: 50px 0;
  }
  .price{
    font-family: var(--learn-font);
    font-weight: 300;
    font-size: 1.2rem;
  }
</style>

<div class="cart-page-container">
  {% if cart.item_count > 0 %}
    <h1>Your Cart</h1>
    <div class="cart-header">
      <span>Product</span>
      <span>Total</span>
    </div>

    <div class="cart-items">
      {% for item in cart.items %}
        {% comment %} --- CHANGE: Using item.key as the unique ID --- {% endcomment %}
        <div class="cart-item" data-key="{{ item.key }}">
          <div class="cart">
            <div class="cart-item-image">
              <a href="{{ item.url }}">
                <img src="{{ item.image | image_url: width: 150 }}" alt="{{ item.image.alt | escape }}">
              </a>
            </div>
            <div class="cart-item-info">
              <a href="{{ item.url }}">{{ item.product.title }}</a>

              {% unless item.variant.title contains 'Default' %}
                <span class="variant-title">{{ item.variant.title }}</span>
              {% endunless %}

              <div class="cart-item-price">
                <span>{{ item.final_price | money }}</span>
                {% if item.original_price != item.final_price %}
                  <span class="original-price">{{ item.original_price | money }}</span>
                {% endif %}
              </div>
              <div class="quantity-selector">
                <button type="button" class="quantity-btn" data-change="minus">-</button>
                <span class="quantity">{{ item.quantity }}</span>
                <button type="button" class="quantity-btn" data-change="plus">+</button>
              </div>
            </div>
          </div>
          <div class="cart-item-total price">
            {{ item.final_line_price | money }}
          </div>
        </div>
      {% endfor %}
    </div>

    <div class="cart-footer">
      <div class="cart-total">
        <span>Subtotal</span>
        <span class="price" data-cart-total> {{ cart.total_price | money }}</span>
      </div>
      <div class="cart-actions">
        <a href="{{ routes.cart_clear_url }}" class="button button--secondary">Clear Cart</a>
        <form action="{{ routes.cart_url }}" method="post">
          <button type="submit" name="checkout" class="button button--primary">Checkout</button>
        </form>
      </div>
    </div>

  {% else %}
    <div class="cart-empty">
      <h1>Your cart is empty</h1>
      <a href="{{ routes.all_products_collection_url }}" class="button button--primary">Continue shopping</a>
    </div>
  {% endif %}
</div>

{% comment %} ----- NEW JAVASCRIPT - IDENTIFYING BY ITEM.KEY ----- {% endcomment %}
<script>
document.addEventListener('DOMContentLoaded', function() {
  const cartItemsContainer = document.querySelector('.cart-items');
  if (!cartItemsContainer) return;

  const moneyFormat = {{ shop.money_format | json }};

  cartItemsContainer.addEventListener('click', function(event) {
    const target = event.target;
    if (!target.classList.contains('quantity-btn')) {
      return;
    }

    event.preventDefault();

    const cartItem = target.closest('.cart-item');
    // **NEW STRATEGY:** Using item.key, a unique string for each line item.
    const itemKey = cartItem.dataset.key;
    const quantitySpan = cartItem.querySelector('.quantity');
    const currentQuantity = parseInt(quantitySpan.textContent, 10);
    const change = target.dataset.change;
    
    let newQuantity = (change === 'plus') ? currentQuantity + 1 : currentQuantity - 1;

    if (newQuantity < 0 || !itemKey) return;

    // Provide immediate visual feedback
    cartItem.style.opacity = '0.6';
    cartItem.querySelectorAll('.quantity-btn').forEach(btn => btn.disabled = true);

    updateCart(itemKey, newQuantity);
  });

  function updateCart(key, quantity) {
    fetch('/cart/update.js', { // Using /update.js is often more reliable
      method: 'POST',
      headers: { 'Content-Type': 'application/json', 'Accept': 'application/json' },
      body: JSON.stringify({
        updates: {
          [key]: quantity
        }
      })
    })
    .then(response => {
        if (!response.ok) { throw new Error(`HTTP error! status: ${response.status}`); }
        return response.json();
    })
    .then(cart => {
      if (cart.status) { // Handle specific Shopify API errors
        throw new Error(cart.description);
      }
      
      if (cart.item_count === 0) {
        location.reload();
        return;
      }

      const cartItemElement = document.querySelector(`.cart-item[data-key="${key}"]`);
      // Find the updated item in the new cart state by its key
      const updatedItem = cart.items.find(item => item.key === key);

      if (updatedItem && cartItemElement) {
        // Item still exists, update its details
        cartItemElement.querySelector('.quantity').textContent = updatedItem.quantity;
        cartItemElement.querySelector('.cart-item-total').innerHTML = formatMoney(updatedItem.final_line_price, moneyFormat);
      } else if (cartItemElement) {
        // Item was not found, so it must have been removed
        cartItemElement.remove();
      }

      // Update the main subtotal
      document.querySelector('[data-cart-total]').innerHTML = formatMoney(cart.total_price, moneyFormat);

      // Restore the item's appearance and functionality
      if(cartItemElement) {
        cartItemElement.style.opacity = '1';
        cartItemElement.querySelectorAll('.quantity-btn').forEach(btn => btn.disabled = false);
      }
    })
    .catch(error => {
      console.error('Error updating cart:', error);
      // Restore the item on failure
      const failedItem = document.querySelector(`.cart-item[data-key="${key}"]`);
      if (failedItem) {
        failedItem.style.opacity = '1';
        failedItem.querySelectorAll('.quantity-btn').forEach(btn => btn.disabled = false);
      }
    });
  }

  function formatMoney(cents, format) {
    if (typeof cents !== 'number') { cents = parseInt(cents, 10); }
    let value = '';
    const placeholderRegex = /\{\{\s*(\w+)\s*\}\}/;
    const formatString = (format || '${{amount}}');

    function formatWithDelimiters(number, precision = 2, thousands = ',', decimal = '.') {
      if (isNaN(number) || number == null) { return 0; }
      number = (number / 100.0).toFixed(precision);
      let parts = number.split('.');
      let dollars = parts[0].replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1' + thousands);
      return dollars + (parts[1] ? decimal + parts[1] : '');
    }
    switch(formatString.match(placeholderRegex)[1]) {
      case 'amount': value = formatWithDelimiters(cents); break;
      default: value = formatWithDelimiters(cents);
    }
    return formatString.replace(placeholderRegex, value);
  };
});
</script>